#!/bin/bash

PRIME="$(test -f ~/.ssh/prime && cat ~/.ssh/prime)"
SSH_CONFIG=$(test -f ~/.ssh/config || touch ~/.ssh/config; ls ~/.ssh/config)
test -d "$SSH_CONFIG.d" && cat $SSH_CONFIG.d/* > $SSH_CONFIG
DEVICE_NAME="Wi-Fi"

function _usage()
{
	echo "Usage: ${0##/*/} MACHINE [-d]"
	echo "Usage: ${0##/*/} info [pattern] # accepts all options of grep"
	echo "Usage: ${0##/*/} [-l] #list"
	echo "Usage: ${0##/*/} [-e]"
	echo "Usage: ${0##/*/} [start|status|stop|proxy] <host..>"
	grep -A100 '^#* OPTIONS #*$' $0
}

function show_ssh_config()
{
	# accepts all options of grep
	cat $SSH_CONFIG |
		while read k v
		do
			local isComment="|"
			case $k in
				Host) echo ;;
				"#") isComment=: ;;
			esac
			echo "$v" | tr " " $isComment | xargs printf "%s "
		done |
		grep $@ |
		column -t |
		tr "|" " "
}

function kill_ssh()
{
	case "$1" in
		-f|force) local force=1; shift;;
	esac
	for i in ${1:-$(ls /tmp/*@* 2>/dev/null | cut -d: -f1 | cut -d/ -f3)}
	do
		if ssh -O check $i 2> /dev/null
		then
			# if proxy exists for this host, turn it off
			which networksetup >/dev/null &&
				test "$(ps aux | grep -c "$i"..[f]NCD)" -ge 1 &&
				sudo networksetup -setsocksfirewallproxystate $DEVICE_NAME off

			ssh -O exit $i
		fi
	done
	if test -n "$force"
	then
		rm /tmp/*@* 2>/dev/null
		which networksetup >/dev/null &&
			networksetup -getsocksfirewallproxy $DEVICE_NAME | grep ^Enabled | grep Yes -q &&
			sudo networksetup -setsocksfirewallproxystate $DEVICE_NAME off
	fi
}

function ssh_status()
{
	for i in ${1:-$(ls /tmp/*@* 2>/dev/null | cut -d: -f1 | cut -d/ -f3)}
	do
		ssh -O check $i 2>&1 | grep pid | sed -E "s,.*(pid=[0-9]*).*,\1 $i,"
	done
	which networksetup >/dev/null && networksetup -getsocksfirewallproxy $DEVICE_NAME | grep ^Enabled
}

function ssh_tunnel_proxy()
{
	ssh $1 -fNCD8888 &&
		( which networksetup >/dev/null && sudo networksetup -setsocksfirewallproxy $DEVICE_NAME localhost 8888 ) &&
		( which networksetup >/dev/null && sudo networksetup -setsocksfirewallproxystate $DEVICE_NAME on )
}

function ssh_prime()
{
	local _hosts=${@:-$PRIME}
	for i in $_hosts
	do
		ssh -fNC $i &
	done
}

function list_ssh_host()
{
	grep -o -E "Host .*" $SSH_CONFIG | sed 's#Host\ ##'
}

### OPTIONS ###
case $1 in
	'')              _usage ;;
	edit|-e)         vim $0 ;;
	info)            shift; show_ssh_config $@ ;;
	list|-l)         list_ssh_host ;;
	prime|-p|start)  shift; ssh_prime $@ ;;
	kill|-k|stop)    shift; kill_ssh $@ ;;
	status|st)       shift; ssh_status $@ ;;
	local)           screen -R -d -S $(whoami) ;;
	proxy)           shift; ssh_tunnel_proxy $1;;
	*)
		ssh -fNC $1
		case $2 in
			-d) ssh -v $1 ;;
			*)  ssh -v $1 -t screen -R -d -S $(whoami) ;;
		esac
	;;
esac
