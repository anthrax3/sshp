#!/bin/bash

DEVICE_NAME="Wi-Fi"
PRIME="$(test -f ~/.ssh/prime && cat ~/.ssh/prime)"
SSH_CONFIG=$(ls ~/.ssh/config)
SSH_GATEWAY=gateway

function _usage()
{
	cat << USAGE
	Usage:
		${0##/*/} <HOST> [-d]
			Login to MACHINE and start a screen session
			-d for no screen
		${0##/*/} [info|grep] [pattern]
			search your ~/.ssh/config and accepts all options of grep
		${0##/*/} [list|-l]
			list all hosts
		${0##/*/} [start|status|stop] <HOST..>
			Check the SSH connection status of a HOST 
		${0##/*/} proxy <HOST>
			HOST as proxy server
USAGE
	grep -A100 '^#* OPTIONS #*$' $0
}

function set_ssh_config()
{
	local _config=${1:-~/.ssh/config}
	SSH_CONFIG=$(test -f $_config || touch $_config; ls $_config)

	test -d "$SSH_CONFIG.d" || return
	# check last modified timestamps and skip config generations
	ls -t $SSH_CONFIG.d/* | head -1 |
		xargs ls -t $SSH_CONFIG | head -1 |
		xargs test "$SSH_CONFIG" = &&
		return

	cat $SSH_CONFIG.d/* > $SSH_CONFIG
	local _skip=0
	cp $SSH_CONFIG $SSH_CONFIG.proxy
	cat $SSH_CONFIG.proxy | while read i
	do
		case "$i" in
			'Host '*)
				echo "$i" | grep -q '*' && _skip=1 && continue
				echo "$i" | xargs -n1 | sed s/$/.p/g | sed -e s/^Host.p/Host/g | xargs echo
			;;
			''|'	')
				test $_skip -eq 1 ||
					echo "	ProxyCommand ssh -q $SSH_GATEWAY nc -q0 %h %p"
					echo ""
				test $_skip -eq 1 && _skip=0
			;;
			*) test $_skip -eq 1 || echo "	$i";;
		esac
	done >> $SSH_CONFIG
	rm $SSH_CONFIG.proxy
}
set_ssh_config $SSH_CONFIG

function show_ssh_config()
{
	local start=0
	# accepts all options of grep
	grep -C10 $@ $SSH_CONFIG |
		while read k v
		do
			local isComment="|"
			case $k in
				Host) start=1; echo ;;
				"#") isComment=: ;;
				--) start=0; continue ;;
			esac
			test $start -eq 1 && echo -n "${v// /$isComment} "
		done |
		grep $@ |
		column -t |
		tr "|" " "
}

function kill_ssh()
{
	case "$1" in
		-f|force) local force=1; shift;;
	esac
	for i in ${1:-$(getActiveConnections | xargs -n1 basename | cut -d: -f1)}
	do
		if ssh -O check $i 2> /dev/null
		then
			# if proxy exists for this host, turn it off
			which networksetup >/dev/null &&
				test "$(ps aux | grep -c "$i"..[f]NCD)" -ge 1 &&
				sudo networksetup -setsocksfirewallproxystate $DEVICE_NAME off

			ssh -O exit $i
		fi
	done
	if test -n "$force"
	then
		getActiveConnections | xargs rm
		kill_ssh_tunnel_proxy
	fi
}

function getActiveConnections()
{
	grep ControlPath $SSH_CONFIG |
		tail -1 |
		while read i j
		do
			echo $j |
				sed -e s,%.,*,g -e s,~,$HOME, |
				while read k
				do
					ls -t $k 2> /dev/null
				done
		done
}

function ssh_status()
{
	for i in ${1:-$(getActiveConnections | xargs -n1 basename | cut -d: -f1)}
	do
		ssh -O check $i 2>&1 | grep pid | sed -E "s,.*(pid=[0-9]*).*,\1 $i,"
	done
	which networksetup >/dev/null && networksetup -getsocksfirewallproxy $DEVICE_NAME | grep ^Enabled
}

function ssh_tunnel_proxy()
{
	case $1 in
		kill) kill_ssh_tunnel_proxy; exit 0;;
	esac
	ssh $1 -fNCD3128 &&
		( which networksetup >/dev/null && sudo networksetup -setsocksfirewallproxy $DEVICE_NAME localhost 3128 ) &&
		( which networksetup >/dev/null && sudo networksetup -setsocksfirewallproxystate $DEVICE_NAME on )
}

function kill_ssh_tunnel_proxy()
{
	which networksetup >/dev/null &&
		networksetup -getsocksfirewallproxy $DEVICE_NAME | grep ^Enabled | grep Yes -q &&
		sudo networksetup -setsocksfirewallproxystate $DEVICE_NAME off
}

# http://wiki.gentoo.org/wiki/SSH_jump_host
# user%host1:22+host2+host3:22
function ProxyCommand()
{
	local  _gateway="$(echo $1 | sed 's/+[^+]*$//;s/\([^+%%]*\)%%\([^+]*\)$/\2 -l \1/;s/:/ -p /')"
	local   _jumpto="$(echo $1 | sed 's/^.*+//;/:/!s/$/ %p/;s/:/ /')"
	local  _sshHost=$(echo $_jumpto | cut -d' ' -f1)
	local  _sshPort=$2
	local _hostname=$(_getPropertyByHost $_sshHost Hostname)
	local     _user=$(_getPropertyByHost $_sshHost User)
	local     _port=$(_getPropertyByHost $_sshHost Port)
	local _identify=$(_getPropertyByHost $_sshHost IdentityFile)

	test "$_sshPort" = "%p" || _port="$_sshPort"
	_port=${_port:-"$_sshPort"}
	test -n "$_user" && _user=$_user@
	ssh $_gateway nc -q0 $_hostname $_port
}

function _getPropertyByHost()
{
	local _SED=$(command -v gsed)
	${_SED:-sed} -n -r -e '/^Host.*\s'$1'(\s|$)/,/^Host/s/^.*'$2' //p' $SSH_CONFIG
}

function ssh_prime()
{
	local _hosts=${@:-$PRIME}
	if test 1 -eq $#
	then
		_keep_trying $_hosts
	else
		for i in $_hosts
		do
			ssh -fNC $i &
		done
	fi
}

function _keep_trying()
{
	local _hosts=${@:-$PRIME}
	local _counter=0
	for i in $_hosts
	do
		until ssh $i echo $i
		do _counter=$(($_counter+1)); echo -e $_counter
		done
	done
}

function list_ssh_host()
{
	local REGEXP=${1:-.*}
	grep "Host " $SSH_CONFIG |
		while read i j
		do echo "$j"
		done |
		grep "$REGEXP"
}

### OPTIONS ###
case $1 in
	'')              _usage ;;
	edit|-e)         vim $0 ;;
	info|grep|search|s)shift; show_ssh_config $@ ;;
	list|-l)         shift; list_ssh_host $@ ;;
	prime|-p|start)  shift; ssh_prime $@ ;;
	kill|-k|stop)    shift; kill_ssh $@ ;;
	status|st)       shift; ssh_status $@ ;;
	local*)          screen -R -d -S $(whoami) ;;
	proxy)           shift; ssh_tunnel_proxy $1;;
	ProxyCommand)    shift; ProxyCommand "$@" ;;
	*)
		ssh -fNC $1
		case $2 in
			-d) ssh -v $1 ;;
			*)  ssh -v $1 -t screen -R -d -S $(whoami) ;;
		esac
	;;
esac
